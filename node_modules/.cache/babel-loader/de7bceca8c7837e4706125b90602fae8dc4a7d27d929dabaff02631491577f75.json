{"ast":null,"code":"// import React, { useEffect, useRef, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import _ from 'lodash';\n// import PhoneInput from 'react-phone-input-2';\n// import 'react-phone-input-2/lib/style.css';\n// import './addUserForm.css';\n// // components\n// import TextInputBlock from '../../../../subPages/Micros/TextInputBlock';\n// import { changeViewSection } from '../../../../redux/action/adminActions';\n// import { allDataChange } from '../../../../redux/action/expo';\n// // import { sendToBackendPost, sendToBackendPostImage } from '../../../../apiCalls';\n// import { activatePopup, deactivatePopup } from '../../../../redux/action/popupActions';\n\n// function AddUserForm() {\n//     const dispatch = useDispatch();\n//     const imageCont = useSelector((state) => state.CropReducer)\n//     const [imgDispState, setImgDispState] = useState('');\n//     const [InputClassvals, setInputClassVal] = useState({ inputName: '', nameClass: '' });\n//     const [formValues, setFormValues] = useState([]);\n//     const imgInpt = useRef(null);\n\n//     // open image file \n//     const OpenFiles = () => {\n//         imgInpt.current?.click()\n//     };\n\n//     //save cropped image\n//     const saveCropedImg = () => {\n//         imgInpt.current.value = '';\n//         dispatch(deactivatePopup());\n//     }\n\n//     //capture image after selecting it from a file\n//     const captureImgInp = (inp) => {\n//         const file = inp.target.files[0];\n//         if (!file) {\n//             return false; // No file selected, handle this case accordingly\n//         }\n//         const reader = new FileReader();\n//         reader.onload = () => {\n//             const dataURL = reader.result;\n//             dispatch(activatePopup('croppImagSquare', {\n//                 minorFun: () => captureImgInp(inp),\n//                 MinorButnName: 'Re-edit',\n//                 MainFun: () => saveCropedImg(),\n//                 MainButnName: 'Save & Continue',\n//                 MainIconName: 'arrow_forward',\n//                 ImageData: dataURL,\n//                 ImageTitle: 'Traffic Passport Size',\n//             }\n//             ));\n//         };\n//         reader.readAsDataURL(inp.target.files[0]);\n//         return true\n//     }\n\n//     //add image in the form value\n//     const effectAddImg = async () => {\n//         const TempForm = formValues;\n//         const upImageFile = await fetch(\n//             imageCont.croppedData.urldata,\n//         ).then((r) => r.blob());\n//         TempForm.image = new File([upImageFile], `${imageCont.ImageTitle}.jpeg`, { type: upImageFile.type, lastModified: Date.now() });\n//         setFormValues({\n//             ...TempForm,\n//         });\n//         setImgDispState(imageCont.croppedData.urldata);\n//     }\n\n//     //get form value from the user function\n//     const getvaluesForm = (Inputname, value) => {\n//         const tempFormVal = formValues;\n//         // check if it the check value\n//         if (typeof (value) === 'boolean') {\n//             if (value) {\n//                 tempFormVal[Inputname] = 'yes';\n//             } else {\n//                 delete tempFormVal[Inputname];\n//             }\n//         } else {\n//             tempFormVal[Inputname] = value;\n//         }\n//         setFormValues({\n//             ...tempFormVal,\n//         });\n\n//         setInputClassVal({ inputName: Inputname, nameClass: 'errorInput' }); // remember to remove this\n//     };\n\n//     //submit form values \n//     const submitForm = async (e) => {\n//         e.preventDefault();\n\n//         //append traffic passport in the form data\n//         const formDat = new FormData();\n//         formDat.append('act', 'traffic_passport');\n//         Object.keys(formValues).map((inputName) => {\n//             formDat.append(inputName, formValues[inputName]);\n//             return true;\n//         });\n\n//         //send image to gateway to get image link\n//         // const imgLink = await sendToBackendPostImage('https://dms.brentles.co.tz/gatway/car.php', formDat);\n//         // if (typeof (imgLink) !== 'object' || typeof (imgLink.image) !== 'string') {\n//             // dispatch(activatePopup('error', { head: 'error', text: 'unable to upload image' }));\n//             // return false;\n//         // }\n\n//         //check if input have values or not\n//         if (typeof (formValues) !== 'object' || _.isEmpty(formValues)) {\n//             dispatch(activatePopup('error', { head: 'Error!', text: 'Insert data in all fields' }));\n//             return 1;\n//         } else if (typeof (formValues.image) === 'undefined') {\n//             dispatch(activatePopup('error', { head: 'Error!', text: 'Vehicle picture is required' }));\n//             return 1;\n//         }\n\n//         const Data = {\n//             fname: formValues.fname,\n//             lname: formValues.lname,\n//             policeIdNumber: formValues.policeID,\n//             phoneNumber: formValues.phone_number,\n//             // profile: imgLink.image,\n//             password: formValues.password\n\n//         }\n//         // const ans = await sendToBackendPost('/addUser/', Data);\n\n//     //     if (ans && ans.state === 'success') {\n//     //         dispatch(activatePopup('info', { head: 'Success', text: ans.message }));\n//     //         dispatch(changeViewSection('user')).then(() => dispatch(allDataChange(Math.random())));\n//     //     } else if (ans && ans.state !== 'success') {\n//     //         // dispatch popup error\n//     //         dispatch(activatePopup('error', { head: 'Error', text: ans.message }));\n//     //     } else {\n//     //         // dispatch popup error\n//     //         dispatch(activatePopup('error', { head: 'Error', text: 'Unknown Server Error' }));\n//     //     }\n\n//     //     console.log(ans);\n//     // };\n\n//     useEffect(() => {\n//         effectAddImg();\n//         // eslint-disable-next-line react-hooks/exhaustive-deps\n//     }, [imageCont.croppedData.urldata])\n\n//     return (\n//         <div className=\"AddUserFormMain\">\n//             <form className=\"AddUserForm\" onSubmit={(e) => submitForm(e)}>\n//                 <div className=\"AddUserFormInputsHolder\">\n//                     <TextInputBlock\n//                         InputName=\"fname\"\n//                         LabelName=\"First Name\"\n//                         Type=\"text\"\n//                         InputStyleClass={InputClassvals.inputName === 'fname' ? InputClassvals.nameClass : ''}\n//                         defaultVal=\"\"\n//                         ChangeFun={getvaluesForm}\n//                         is_Required={true}\n//                     />\n//                     <TextInputBlock\n//                         InputName=\"lname\"\n//                         LabelName=\"Last Name\"\n//                         Type=\"text\"\n//                         InputStyleClass={InputClassvals.inputName === 'lname' ? InputClassvals.nameClass : ''}\n//                         defaultVal=\"\"\n//                         ChangeFun={getvaluesForm}\n//                         is_Required={true}\n//                     />\n//                     <TextInputBlock\n//                         InputName=\"policeID\"\n//                         LabelName=\"Police ID Number\"\n//                         Type=\"text\"\n//                         InputStyleClass={InputClassvals.inputName === ' policeID' ? InputClassvals.nameClass : ''}\n//                         defaultVal=\"\"\n//                         ChangeFun={getvaluesForm}\n//                         is_Required={true}\n//                     />\n//                     <div className=\"PhoneNumberInputHolder\">\n//                         <div className=\"PhoneNumberLabelContactConfig\">\n//                             Phone Number\n//                         </div>\n//                         <PhoneInput\n//                             country={'tz'}\n//                             onChange={(phone) => getvaluesForm('phone_number', phone)}\n//                             countryCodeEditable={false}\n//                             onlyCountries={['tz', 'ke', 'ug', 'rw']}\n//                             placeholder=\"eg. 0622000444\"\n//                             required={true}\n//                             containerClass=\"phoneInputContainer\"\n//                             inputClass=\"phoneInputClassPhone\"\n//                             buttonClass=\"flagDropDownCustomPhone\"\n//                             inputProps={{ required: true }}\n//                         />\n//                     </div>\n\n//                     <TextInputBlock\n//                         InputName=\"password\"\n//                         LabelName=\"Password\"\n//                         Type=\"text\"\n//                         InputStyleClass={InputClassvals.inputName === 'password' ? InputClassvals.nameClass : ''}\n//                         defaultVal=\"\"\n//                         ChangeFun={getvaluesForm}\n//                         is_Required={true}\n//                     />\n//                     <div className=\"vehiclePictureHolder\">\n//                         <h3 className=\"AddVehiclePictureHeader\">Traffic Passport</h3>\n//                         <input style={{ display: 'none' }} type=\"file\" name=\"image1\" ref={imgInpt} accept=\"image/*\" onChange={(e) => captureImgInp(e)} />\n//                         <div style={{ backgroundImage: `url(${imgDispState})` }} className=\"VehiclePictureBack\" onClick={() => OpenFiles()}>\n//                             <button type=\"button\" className=\"AddvehicleButton\">\n//                                 <span className=\"material-symbols-rounded\">\n//                                     add\n//                                 </span>\n//                             </button>\n//                         </div>\n//                     </div>\n//                     <div className=\"CreateUserBtnHolderAddUser\">\n//                         <button className=\"CreateUserBtnAddUser\">Create User</button>\n//                     </div>\n//                 </div>\n//             </form >\n//         </div >\n//     );\n// }\n\n// // export default AddUserForm;","map":{"version":3,"names":[],"sources":["/Users/ansi/Desktop/Desktop_folders/PROJECTS/journey-app/src/pages/Admin/AddUsers/Sections/AddUserForm.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import _ from 'lodash';\n// import PhoneInput from 'react-phone-input-2';\n// import 'react-phone-input-2/lib/style.css';\n// import './addUserForm.css';\n// // components\n// import TextInputBlock from '../../../../subPages/Micros/TextInputBlock';\n// import { changeViewSection } from '../../../../redux/action/adminActions';\n// import { allDataChange } from '../../../../redux/action/expo';\n// // import { sendToBackendPost, sendToBackendPostImage } from '../../../../apiCalls';\n// import { activatePopup, deactivatePopup } from '../../../../redux/action/popupActions';\n\n// function AddUserForm() {\n//     const dispatch = useDispatch();\n//     const imageCont = useSelector((state) => state.CropReducer)\n//     const [imgDispState, setImgDispState] = useState('');\n//     const [InputClassvals, setInputClassVal] = useState({ inputName: '', nameClass: '' });\n//     const [formValues, setFormValues] = useState([]);\n//     const imgInpt = useRef(null);\n\n//     // open image file \n//     const OpenFiles = () => {\n//         imgInpt.current?.click()\n//     };\n\n//     //save cropped image\n//     const saveCropedImg = () => {\n//         imgInpt.current.value = '';\n//         dispatch(deactivatePopup());\n//     }\n\n//     //capture image after selecting it from a file\n//     const captureImgInp = (inp) => {\n//         const file = inp.target.files[0];\n//         if (!file) {\n//             return false; // No file selected, handle this case accordingly\n//         }\n//         const reader = new FileReader();\n//         reader.onload = () => {\n//             const dataURL = reader.result;\n//             dispatch(activatePopup('croppImagSquare', {\n//                 minorFun: () => captureImgInp(inp),\n//                 MinorButnName: 'Re-edit',\n//                 MainFun: () => saveCropedImg(),\n//                 MainButnName: 'Save & Continue',\n//                 MainIconName: 'arrow_forward',\n//                 ImageData: dataURL,\n//                 ImageTitle: 'Traffic Passport Size',\n//             }\n//             ));\n//         };\n//         reader.readAsDataURL(inp.target.files[0]);\n//         return true\n//     }\n\n//     //add image in the form value\n//     const effectAddImg = async () => {\n//         const TempForm = formValues;\n//         const upImageFile = await fetch(\n//             imageCont.croppedData.urldata,\n//         ).then((r) => r.blob());\n//         TempForm.image = new File([upImageFile], `${imageCont.ImageTitle}.jpeg`, { type: upImageFile.type, lastModified: Date.now() });\n//         setFormValues({\n//             ...TempForm,\n//         });\n//         setImgDispState(imageCont.croppedData.urldata);\n//     }\n\n//     //get form value from the user function\n//     const getvaluesForm = (Inputname, value) => {\n//         const tempFormVal = formValues;\n//         // check if it the check value\n//         if (typeof (value) === 'boolean') {\n//             if (value) {\n//                 tempFormVal[Inputname] = 'yes';\n//             } else {\n//                 delete tempFormVal[Inputname];\n//             }\n//         } else {\n//             tempFormVal[Inputname] = value;\n//         }\n//         setFormValues({\n//             ...tempFormVal,\n//         });\n\n//         setInputClassVal({ inputName: Inputname, nameClass: 'errorInput' }); // remember to remove this\n//     };\n\n\n//     //submit form values \n//     const submitForm = async (e) => {\n//         e.preventDefault();\n\n//         //append traffic passport in the form data\n//         const formDat = new FormData();\n//         formDat.append('act', 'traffic_passport');\n//         Object.keys(formValues).map((inputName) => {\n//             formDat.append(inputName, formValues[inputName]);\n//             return true;\n//         });\n\n\n//         //send image to gateway to get image link\n//         // const imgLink = await sendToBackendPostImage('https://dms.brentles.co.tz/gatway/car.php', formDat);\n//         // if (typeof (imgLink) !== 'object' || typeof (imgLink.image) !== 'string') {\n//             // dispatch(activatePopup('error', { head: 'error', text: 'unable to upload image' }));\n//             // return false;\n//         // }\n\n//         //check if input have values or not\n//         if (typeof (formValues) !== 'object' || _.isEmpty(formValues)) {\n//             dispatch(activatePopup('error', { head: 'Error!', text: 'Insert data in all fields' }));\n//             return 1;\n//         } else if (typeof (formValues.image) === 'undefined') {\n//             dispatch(activatePopup('error', { head: 'Error!', text: 'Vehicle picture is required' }));\n//             return 1;\n//         }\n\n\n//         const Data = {\n//             fname: formValues.fname,\n//             lname: formValues.lname,\n//             policeIdNumber: formValues.policeID,\n//             phoneNumber: formValues.phone_number,\n//             // profile: imgLink.image,\n//             password: formValues.password\n\n//         }\n//         // const ans = await sendToBackendPost('/addUser/', Data);\n\n//     //     if (ans && ans.state === 'success') {\n//     //         dispatch(activatePopup('info', { head: 'Success', text: ans.message }));\n//     //         dispatch(changeViewSection('user')).then(() => dispatch(allDataChange(Math.random())));\n//     //     } else if (ans && ans.state !== 'success') {\n//     //         // dispatch popup error\n//     //         dispatch(activatePopup('error', { head: 'Error', text: ans.message }));\n//     //     } else {\n//     //         // dispatch popup error\n//     //         dispatch(activatePopup('error', { head: 'Error', text: 'Unknown Server Error' }));\n//     //     }\n\n//     //     console.log(ans);\n//     // };\n\n//     useEffect(() => {\n//         effectAddImg();\n//         // eslint-disable-next-line react-hooks/exhaustive-deps\n//     }, [imageCont.croppedData.urldata])\n\n\n//     return (\n//         <div className=\"AddUserFormMain\">\n//             <form className=\"AddUserForm\" onSubmit={(e) => submitForm(e)}>\n//                 <div className=\"AddUserFormInputsHolder\">\n//                     <TextInputBlock\n//                         InputName=\"fname\"\n//                         LabelName=\"First Name\"\n//                         Type=\"text\"\n//                         InputStyleClass={InputClassvals.inputName === 'fname' ? InputClassvals.nameClass : ''}\n//                         defaultVal=\"\"\n//                         ChangeFun={getvaluesForm}\n//                         is_Required={true}\n//                     />\n//                     <TextInputBlock\n//                         InputName=\"lname\"\n//                         LabelName=\"Last Name\"\n//                         Type=\"text\"\n//                         InputStyleClass={InputClassvals.inputName === 'lname' ? InputClassvals.nameClass : ''}\n//                         defaultVal=\"\"\n//                         ChangeFun={getvaluesForm}\n//                         is_Required={true}\n//                     />\n//                     <TextInputBlock\n//                         InputName=\"policeID\"\n//                         LabelName=\"Police ID Number\"\n//                         Type=\"text\"\n//                         InputStyleClass={InputClassvals.inputName === ' policeID' ? InputClassvals.nameClass : ''}\n//                         defaultVal=\"\"\n//                         ChangeFun={getvaluesForm}\n//                         is_Required={true}\n//                     />\n//                     <div className=\"PhoneNumberInputHolder\">\n//                         <div className=\"PhoneNumberLabelContactConfig\">\n//                             Phone Number\n//                         </div>\n//                         <PhoneInput\n//                             country={'tz'}\n//                             onChange={(phone) => getvaluesForm('phone_number', phone)}\n//                             countryCodeEditable={false}\n//                             onlyCountries={['tz', 'ke', 'ug', 'rw']}\n//                             placeholder=\"eg. 0622000444\"\n//                             required={true}\n//                             containerClass=\"phoneInputContainer\"\n//                             inputClass=\"phoneInputClassPhone\"\n//                             buttonClass=\"flagDropDownCustomPhone\"\n//                             inputProps={{ required: true }}\n//                         />\n//                     </div>\n\n//                     <TextInputBlock\n//                         InputName=\"password\"\n//                         LabelName=\"Password\"\n//                         Type=\"text\"\n//                         InputStyleClass={InputClassvals.inputName === 'password' ? InputClassvals.nameClass : ''}\n//                         defaultVal=\"\"\n//                         ChangeFun={getvaluesForm}\n//                         is_Required={true}\n//                     />\n//                     <div className=\"vehiclePictureHolder\">\n//                         <h3 className=\"AddVehiclePictureHeader\">Traffic Passport</h3>\n//                         <input style={{ display: 'none' }} type=\"file\" name=\"image1\" ref={imgInpt} accept=\"image/*\" onChange={(e) => captureImgInp(e)} />\n//                         <div style={{ backgroundImage: `url(${imgDispState})` }} className=\"VehiclePictureBack\" onClick={() => OpenFiles()}>\n//                             <button type=\"button\" className=\"AddvehicleButton\">\n//                                 <span className=\"material-symbols-rounded\">\n//                                     add\n//                                 </span>\n//                             </button>\n//                         </div>\n//                     </div>\n//                     <div className=\"CreateUserBtnHolderAddUser\">\n//                         <button className=\"CreateUserBtnAddUser\">Create User</button>\n//                     </div>\n//                 </div>\n//             </form >\n//         </div >\n//     );\n// }\n\n// // export default AddUserForm;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}