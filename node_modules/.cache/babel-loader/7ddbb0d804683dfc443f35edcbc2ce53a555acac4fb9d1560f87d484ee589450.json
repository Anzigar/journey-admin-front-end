{"ast":null,"code":"var _jsxFileName = \"/Users/ansi/Desktop/Desktop_folders/PROJECTS/journey-app/src/subPages/Popups/image_edit/ImageCropFlex.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\nimport './imageCrop.css';\n\n/// redux sthings\nimport { useSelector, useDispatch } from 'react-redux';\n// actions\nimport { activatePopup } from '../../../redux/action/popupActions';\nimport { addCroppedImge } from '../../../redux/action/cropAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageCropFlex() {\n  _s();\n  // reduxs\n  const dispatch = useDispatch();\n  const imageCont = useSelector(state => state.PopupReducer.data);\n  // states\n  const [rotateDeg, setRotateDeg] = useState(0);\n  const cropperRef = useRef(null);\n  // rotate image to certain degree\n  const rotateNu = num => {\n    if (rotateDeg + num === 360) {\n      cropperRef.current.cropper.rotateTo(0);\n      setRotateDeg(0);\n    } else {\n      const Tempodeg = rotateDeg + num;\n      setRotateDeg(Tempodeg);\n      cropperRef.current.cropper.rotateTo(Tempodeg);\n    }\n  };\n\n  // reset canvas to initial values\n  const reSetToInit = () => {\n    cropperRef.current.cropper.reset();\n  };\n\n  /// crop image after click done buttn\n  const cropImge = () => {\n    cropperRef.current.cropper.getCroppedCanvas().toBlob(blob => {\n      const filex = new File([blob], 'mimiCrop.jpeg', {\n        type: blob.type,\n        lastModified: Date.now()\n      });\n      const urldata = window.URL.createObjectURL(filex);\n      dispatch(addCroppedImge({\n        filex: {},\n        urldata,\n        dispIcon: {\n          display: 'none'\n        }\n      }));\n      dispatch(activatePopup('croppImagePreview', imageCont));\n    }, 'image/jpeg');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"imageCropSecMain\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"cropMainHead\",\n      children: imageCont.ImageTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvasHolderImageCrop\",\n      children: /*#__PURE__*/_jsxDEV(Cropper, {\n        src: imageCont.imageData,\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        initialAspectRatio: 16 / 11,\n        guides: true,\n        viewMode: 2,\n        ref: cropperRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lowerControlsImageCrop\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"BtnImageCrop cancelImgeCrop\",\n        onClick: () => reSetToInit(),\n        type: \"button\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"BtnImageCrop rotateImageCrop\",\n        onClick: () => rotateNu(90),\n        type: \"button\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-symbols-rounded\",\n          children: \"crop_rotate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"textRotateBtnImgecrop\",\n          children: \"Rotate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"BtnImageCrop sendImageCrop\",\n        onClick: () => cropImge(),\n        type: \"button\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-symbols-rounded\",\n          children: \"done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageCropFlex, \"FTTs9+5MJbp8LhqaB5Kn+a+O4W8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ImageCropFlex;\nexport default ImageCropFlex;\nvar _c;\n$RefreshReg$(_c, \"ImageCropFlex\");","map":{"version":3,"names":["React","useState","useRef","Cropper","useSelector","useDispatch","activatePopup","addCroppedImge","jsxDEV","_jsxDEV","ImageCropFlex","_s","dispatch","imageCont","state","PopupReducer","data","rotateDeg","setRotateDeg","cropperRef","rotateNu","num","current","cropper","rotateTo","Tempodeg","reSetToInit","reset","cropImge","getCroppedCanvas","toBlob","blob","filex","File","type","lastModified","Date","now","urldata","window","URL","createObjectURL","dispIcon","display","className","children","ImageTitle","fileName","_jsxFileName","lineNumber","columnNumber","src","imageData","style","width","height","initialAspectRatio","guides","viewMode","ref","onClick","_c","$RefreshReg$"],"sources":["/Users/ansi/Desktop/Desktop_folders/PROJECTS/journey-app/src/subPages/Popups/image_edit/ImageCropFlex.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\nimport './imageCrop.css';\n\n/// redux sthings\nimport { useSelector, useDispatch } from 'react-redux';\n// actions\nimport { activatePopup } from '../../../redux/action/popupActions';\nimport { addCroppedImge } from '../../../redux/action/cropAction';\n\nfunction ImageCropFlex() {\n    // reduxs\n    const dispatch = useDispatch();\n    const imageCont = useSelector((state) => state.PopupReducer.data);\n    // states\n    const [rotateDeg, setRotateDeg] = useState(0);\n    const cropperRef = useRef(null);\n    // rotate image to certain degree\n    const rotateNu = (num) => {\n        if ((rotateDeg + num) === 360) {\n            cropperRef.current.cropper.rotateTo(0);\n            setRotateDeg(0);\n        } else {\n            const Tempodeg = rotateDeg + num;\n            setRotateDeg(Tempodeg);\n            cropperRef.current.cropper.rotateTo(Tempodeg);\n        }\n    };\n\n    // reset canvas to initial values\n    const reSetToInit = () => {\n        cropperRef.current.cropper.reset();\n    };\n\n    /// crop image after click done buttn\n    const cropImge = () => {\n        cropperRef.current.cropper.getCroppedCanvas().toBlob((blob) => {\n            const filex = new File([blob], 'mimiCrop.jpeg', { type: blob.type, lastModified: Date.now() });\n            const urldata = window.URL.createObjectURL(filex);\n            dispatch(addCroppedImge({ filex: {}, urldata, dispIcon: { display: 'none' } }));\n            dispatch(activatePopup('croppImagePreview', imageCont));\n        }, 'image/jpeg');\n    };\n    return (\n        <div className=\"imageCropSecMain\">\n            <h3 className=\"cropMainHead\">{imageCont.ImageTitle}</h3>\n            <div className=\"canvasHolderImageCrop\">\n                <Cropper\n                    src={imageCont.imageData}\n                    style={{ width: '100%', height: '100%' }}\n                    initialAspectRatio={16 / 11}\n                    guides\n                    viewMode={2}\n                    ref={cropperRef}\n                />\n            </div>\n            <div className=\"lowerControlsImageCrop\">\n                <button className=\"BtnImageCrop cancelImgeCrop\" onClick={() => reSetToInit()} type=\"button\">\n                    Reset\n                </button>\n                <button className=\"BtnImageCrop rotateImageCrop\" onClick={() => rotateNu(90)} type=\"button\">\n                    <span className=\"material-symbols-rounded\">\n                        crop_rotate\n                    </span>\n                    <span className=\"textRotateBtnImgecrop\">Rotate</span>\n                </button>\n                <button className=\"BtnImageCrop sendImageCrop\" onClick={() => cropImge()} type=\"button\">\n                    <span className=\"material-symbols-rounded\">\n                        done\n                    </span>\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ImageCropFlex;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}